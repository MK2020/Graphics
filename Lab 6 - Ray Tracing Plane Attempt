#version 400

in vec3 dir; 
out vec4 outcolour;

uniform mat4 mMatrix;
uniform mat4 mvMatrix;
uniform mat4 mvMatrixScene;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

const int raytraceDepth = 42;
const int numSpheres = 6;

//example data structures
struct Ray
{
	vec3 origin;
	vec3 dir;
};
struct Sphere
{
	vec3 centre;
	float radius;
	vec3 colour;
};
struct Plane
{
	vec3 point;
	vec3 normal;
	vec3 colour;
};

struct Intersection
{
    float t; //closest hit
    vec3 point;	// hit point
    vec3 normal;	// normal
    int hit;	//did it hit?
    vec3 colour; // colour accumulation, can be also implemented in struct Ray
};

void sphere_intersect(Sphere sph, Ray ray, inout Intersection intersect)
{
	//TODO implement sphere intersection function
}

void plane_intersect(Plane pl, Ray ray, inout Intersection intersect)
{
	float mu;
	mu = -  (dot ( (ray.origin- pl.point), pl.normal)/  dot( ray. dir, pl.normal));
	
	if( mu > 0 ){
		//t distance form ray origin to intersection point 
		//intersect.t = distance(ray.origin, intersect.point);
		intersect.t = length(ray.origin - intersect.point);		
		intersect.point = ray.origin + mu * ray.dir;	
		intersect. normal = pl.normal;	
		intersect.hit = 1;	
		intersect.colour =pl.colour;
	}
	else{
		intersect.hit = 0;
	}	
}

Sphere sphere[numSpheres];
Plane plane;
void Intersect(Ray r, inout Intersection i)
{
	//TODO implement intersection function
	plane_intersect(plane, r, i);
	//sphere_intersect(sphere[0] , r, i );

	
}

int seed = 0;
float rnd()
{
	seed = int(mod(float(seed)*1364.0+626.0, 509.0));
	return float(seed)/509.0;
}

vec3 computeShadow(in Intersection intersect)
{
	//TODO implement shadow computation
	return vec3(0,0,0);
}

void main()
{
	Intersection i;
	Ray r;

	//please leave the scene config unaltered for marking 
	sphere[0].centre   = vec3(-2.0, 1.5, -3.5);
	sphere[0].radius   = 1.5;
	sphere[0].colour = vec3(0.8,0.8,0.8);
	sphere[1].centre   = vec3(-0.5, 0.0, -2.0);
	sphere[1].radius   = 0.6;
	sphere[1].colour = vec3(0.3,0.8,0.3);
	sphere[2].centre   = vec3(1.0, 0.7, -2.2);
	sphere[2].radius   = 0.8;
	sphere[2].colour = vec3(0.3,0.8,0.8);
	sphere[3].centre   = vec3(0.7, -0.3, -1.2);
	sphere[3].radius   = 0.2;
	sphere[3].colour = vec3(0.8,0.8,0.3);
	sphere[4].centre   = vec3(-0.7, -0.3, -1.2);
	sphere[4].radius   = 0.2;
	sphere[4].colour = vec3(0.8,0.3,0.3);
	sphere[5].centre   = vec3(0.2, -0.2, -1.2);
	sphere[5].radius   = 0.3;
	sphere[5].colour = vec3(0.8,0.3,0.8);
	plane.point = vec3(0,-0.5, 0);
	plane.normal = vec3(0, 1.0, 0);
	plane.colour = vec3(1, 1, 1);
	seed = int(mod(dir.x * dir.y * 39786038.0, 65536.0));
	//scene definition end

	vec4 colour = vec4(0,0,0,1);
	//TODO implement ray tracing main loop here
	
	
	Intersect(r, i);
	r.dir = dir;
	r.origin = vec3(0.0,0.0,0.0);

	if(i.hit != 0 ){
		outcolour +=  vec4(i.colour, 1.0);		
	}else{
		outcolour = colour;
	}


}








